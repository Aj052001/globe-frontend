"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/three-conic-polygon-geometry";
exports.ids = ["vendor-chunks/three-conic-polygon-geometry"];
exports.modules = {

/***/ "(ssr)/./node_modules/three-conic-polygon-geometry/dist/three-conic-polygon-geometry.mjs":
/*!*****************************************************************************************!*\
  !*** ./node_modules/three-conic-polygon-geometry/dist/three-conic-polygon-geometry.mjs ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConicPolygonBufferGeometry: () => (/* binding */ ConicPolygonBufferGeometry),\n/* harmony export */   ConicPolygonGeometry: () => (/* binding */ ConicPolygonBufferGeometry)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var d3_array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! d3-array */ \"(ssr)/./node_modules/d3-array/src/merge.js\");\n/* harmony import */ var d3_array__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! d3-array */ \"(ssr)/./node_modules/d3-array/src/mean.js\");\n/* harmony import */ var d3_array__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! d3-array */ \"(ssr)/./node_modules/d3-array/src/extent.js\");\n/* harmony import */ var earcut__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! earcut */ \"(ssr)/./node_modules/earcut/src/earcut.js\");\n/* harmony import */ var delaunator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! delaunator */ \"(ssr)/./node_modules/delaunator/index.js\");\n/* harmony import */ var _turf_boolean_point_in_polygon__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @turf/boolean-point-in-polygon */ \"(ssr)/./node_modules/@turf/boolean-point-in-polygon/dist/esm/index.js\");\n/* harmony import */ var d3_geo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! d3-geo */ \"(ssr)/./node_modules/d3-geo/src/bounds.js\");\n/* harmony import */ var d3_geo__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! d3-geo */ \"(ssr)/./node_modules/d3-geo/src/distance.js\");\n/* harmony import */ var d3_geo__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! d3-geo */ \"(ssr)/./node_modules/d3-geo/src/interpolate.js\");\n/* harmony import */ var d3_geo__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! d3-geo */ \"(ssr)/./node_modules/d3-geo/src/contains.js\");\n/* harmony import */ var d3_geo_voronoi__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! d3-geo-voronoi */ \"(ssr)/./node_modules/d3-geo-voronoi/src/voronoi.js\");\n/* harmony import */ var d3_scale__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! d3-scale */ \"(ssr)/./node_modules/d3-scale/src/linear.js\");\n\n\n\n\n\n\n\n\n\nfunction _arrayLikeToArray(r, a) {\n  (null == a || a > r.length) && (a = r.length);\n  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n  return n;\n}\nfunction _arrayWithHoles(r) {\n  if (Array.isArray(r)) return r;\n}\nfunction _arrayWithoutHoles(r) {\n  if (Array.isArray(r)) return _arrayLikeToArray(r);\n}\nfunction _assertThisInitialized(e) {\n  if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  return e;\n}\nfunction _callSuper(t, o, e) {\n  return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, [], _getPrototypeOf(t).constructor) : o.apply(t, e));\n}\nfunction _classCallCheck(a, n) {\n  if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\");\n}\nfunction _createClass(e, r, t) {\n  return Object.defineProperty(e, \"prototype\", {\n    writable: !1\n  }), e;\n}\nfunction _getPrototypeOf(t) {\n  return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {\n    return t.__proto__ || Object.getPrototypeOf(t);\n  }, _getPrototypeOf(t);\n}\nfunction _inherits(t, e) {\n  if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\");\n  t.prototype = Object.create(e && e.prototype, {\n    constructor: {\n      value: t,\n      writable: !0,\n      configurable: !0\n    }\n  }), Object.defineProperty(t, \"prototype\", {\n    writable: !1\n  }), e && _setPrototypeOf(t, e);\n}\nfunction _isNativeReflectConstruct() {\n  try {\n    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n  } catch (t) {}\n  return (_isNativeReflectConstruct = function () {\n    return !!t;\n  })();\n}\nfunction _iterableToArray(r) {\n  if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r);\n}\nfunction _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) ; else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _possibleConstructorReturn(t, e) {\n  if (e && (\"object\" == typeof e || \"function\" == typeof e)) return e;\n  if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\");\n  return _assertThisInitialized(t);\n}\nfunction _setPrototypeOf(t, e) {\n  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {\n    return t.__proto__ = e, t;\n  }, _setPrototypeOf(t, e);\n}\nfunction _slicedToArray(r, e) {\n  return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();\n}\nfunction _toConsumableArray(r) {\n  return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();\n}\nfunction _unsupportedIterableToArray(r, a) {\n  if (r) {\n    if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n    var t = {}.toString.call(r).slice(8, -1);\n    return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;\n  }\n}\n\nfunction geoPolygonTriangulate(polygon) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    _ref$resolution = _ref.resolution,\n    resolution = _ref$resolution === void 0 ? Infinity : _ref$resolution;\n  var contour = interpolateContourPoints(polygon, resolution);\n  var edgePoints = (0,d3_array__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(contour);\n  var innerPoints = getInnerGeoPoints(polygon, resolution);\n  var points = [].concat(_toConsumableArray(edgePoints), _toConsumableArray(innerPoints));\n  var boundariesGeojson = {\n    type: 'Polygon',\n    coordinates: polygon\n  };\n  var _geoBounds = (0,d3_geo__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(boundariesGeojson),\n    _geoBounds2 = _slicedToArray(_geoBounds, 2),\n    _geoBounds2$ = _slicedToArray(_geoBounds2[0], 2),\n    minLng = _geoBounds2$[0],\n    minLat = _geoBounds2$[1],\n    _geoBounds2$2 = _slicedToArray(_geoBounds2[1], 2),\n    maxLng = _geoBounds2$2[0],\n    maxLat = _geoBounds2$2[1];\n  var crossesPoleOrAntimeridian = minLng > maxLng // crosses antimeridian\n  || maxLat >= 89 // crosses north pole\n  || minLat <= -89; // crosses south pole\n\n  var indices = [];\n  if (crossesPoleOrAntimeridian) {\n    // Use d3-geo-voronoi. Slowest, but most accurate for polygons that cross poles or anti-meridian\n    var vt = (0,d3_geo_voronoi__WEBPACK_IMPORTED_MODULE_3__.geoVoronoi)(points).triangles(); // geoDelaunay generates more triangles than needed\n    var pntMap = new Map(points.map(function (_ref2, idx) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n        lng = _ref3[0],\n        lat = _ref3[1];\n      return [\"\".concat(lng, \"-\").concat(lat), idx];\n    }));\n    vt.features.forEach(function (f) {\n      var _indices;\n      var triangle = f.geometry.coordinates[0].slice(0, 3).reverse(); // reverse wound to match earcut\n\n      var inds = [];\n      triangle.forEach(function (_ref4) {\n        var _ref5 = _slicedToArray(_ref4, 2),\n          lng = _ref5[0],\n          lat = _ref5[1];\n        var k = \"\".concat(lng, \"-\").concat(lat);\n        pntMap.has(k) && inds.push(pntMap.get(k));\n      });\n      if (inds.length !== 3) return; // triangle malfunction\n\n      // exclude edge triangles outside polygon perimeter or through holes\n      if (inds.some(function (ind) {\n        return ind < edgePoints.length;\n      })) {\n        var triangleCentroid = f.properties.circumcenter;\n        if (!pointInside(triangleCentroid, boundariesGeojson, crossesPoleOrAntimeridian)) return;\n      }\n      (_indices = indices).push.apply(_indices, inds);\n    });\n  } else if (!innerPoints.length) {\n    // earcut triangulation slightly more performing if it's only using the polygon perimeter\n    var _earcutFlatten = (0,earcut__WEBPACK_IMPORTED_MODULE_0__.flatten)(contour),\n      vertices = _earcutFlatten.vertices,\n      _earcutFlatten$holes = _earcutFlatten.holes,\n      holes = _earcutFlatten$holes === void 0 ? [] : _earcutFlatten$holes;\n    indices = (0,earcut__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(vertices, holes, 2);\n  } else {\n    // use delaunator\n    var delaunay = delaunator__WEBPACK_IMPORTED_MODULE_4__[\"default\"].from(points);\n    var _loop = function _loop(i) {\n      var _indices2;\n      var inds = [2, 1, 0].map(function (idx) {\n        return delaunay.triangles[i + idx];\n      }); // reverse wound to have same orientation as earcut\n      var triangle = inds.map(function (indice) {\n        return points[indice];\n      });\n\n      // exclude edge triangles outside polygon perimeter or through holes\n      if (inds.some(function (ind) {\n        return ind < edgePoints.length;\n      })) {\n        var triangleCentroid = [0, 1].map(function (coordIdx) {\n          return (0,d3_array__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(triangle, function (p) {\n            return p[coordIdx];\n          });\n        });\n        if (!pointInside(triangleCentroid, boundariesGeojson, crossesPoleOrAntimeridian)) return 1; // continue\n      }\n      (_indices2 = indices).push.apply(_indices2, _toConsumableArray(inds));\n    };\n    for (var i = 0, len = delaunay.triangles.length; i < len; i += 3) {\n      if (_loop(i)) continue;\n    }\n  }\n\n  // calc uvs\n  var lngUvScale = (0,d3_scale__WEBPACK_IMPORTED_MODULE_6__[\"default\"])((0,d3_array__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(points, function (d) {\n    return d[0];\n  }), [0, 1]);\n  var latUvScale = (0,d3_scale__WEBPACK_IMPORTED_MODULE_6__[\"default\"])((0,d3_array__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(points, function (d) {\n    return d[1];\n  }), [0, 1]);\n  var uvs = points.map(function (_ref6) {\n    var _ref7 = _slicedToArray(_ref6, 2),\n      lng = _ref7[0],\n      lat = _ref7[1];\n    return [lngUvScale(lng), latUvScale(lat)];\n  });\n  var triangles = {\n    points: points,\n    indices: indices,\n    uvs: uvs\n  };\n  return {\n    contour: contour,\n    triangles: triangles\n  };\n}\nfunction interpolateContourPoints(polygon, maxDistance) {\n  // add interpolated points for segments that are further apart than the max distance\n  return polygon.map(function (coords) {\n    var pnts = [];\n    var prevPnt;\n    coords.forEach(function (pnt) {\n      if (prevPnt) {\n        var dist = (0,d3_geo__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(pnt, prevPnt) * 180 / Math.PI;\n        if (dist > maxDistance) {\n          var interpol = (0,d3_geo__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(prevPnt, pnt);\n          var tStep = 1 / Math.ceil(dist / maxDistance);\n          var t = tStep;\n          while (t < 1) {\n            pnts.push(interpol(t));\n            t += tStep;\n          }\n        }\n      }\n      pnts.push(prevPnt = pnt);\n    });\n    return pnts;\n  });\n}\nfunction getInnerGeoPoints(polygon, maxDistance) {\n  var boundariesGeojson = {\n    type: 'Polygon',\n    coordinates: polygon\n  };\n  var _geoBounds3 = (0,d3_geo__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(boundariesGeojson),\n    _geoBounds4 = _slicedToArray(_geoBounds3, 2),\n    _geoBounds4$ = _slicedToArray(_geoBounds4[0], 2),\n    minLng = _geoBounds4$[0],\n    minLat = _geoBounds4$[1],\n    _geoBounds4$2 = _slicedToArray(_geoBounds4[1], 2),\n    maxLng = _geoBounds4$2[0],\n    maxLat = _geoBounds4$2[1];\n\n  // polygon smaller than maxDistance -> no inner points\n  if (Math.min(Math.abs(maxLng - minLng), Math.abs(maxLat - minLat)) < maxDistance) return [];\n  var crossesPoleOrAntimeridian = minLng > maxLng || maxLat >= 89 || minLat <= -89;\n  return getGeoSpiralGrid(maxDistance, {\n    minLng: minLng,\n    maxLng: maxLng,\n    minLat: minLat,\n    maxLat: maxLat\n  }).filter(function (pnt) {\n    return pointInside(pnt, boundariesGeojson, crossesPoleOrAntimeridian);\n  });\n}\nfunction getGeoSpiralGrid(distanceBetweenPoints) {\n  var _ref8 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    minLng = _ref8.minLng,\n    maxLng = _ref8.maxLng,\n    minLat = _ref8.minLat,\n    maxLat = _ref8.maxLat;\n  var numPoints = Math.round(Math.pow(360 / distanceBetweenPoints, 2) / Math.PI);\n\n  // https://observablehq.com/@mbostock/spherical-fibonacci-lattice\n  var phi = (1 + Math.sqrt(5)) / 2; // golden ratio\n\n  var getPntLng = function getPntLng(idx) {\n    return idx / phi * 360 % 360 - 180;\n  };\n  var getPntLat = function getPntLat(idx) {\n    return Math.acos(2 * idx / numPoints - 1) / Math.PI * 180 - 90;\n  };\n  var getPntIdx = function getPntIdx(lat) {\n    return numPoints * (Math.cos((lat + 90) * Math.PI / 180) + 1) / 2;\n  };\n  var pntIdxRange = [maxLat !== undefined ? Math.ceil(getPntIdx(maxLat)) : 0, minLat !== undefined ? Math.floor(getPntIdx(minLat)) : numPoints - 1];\n  var isLngInRange = minLng === undefined && maxLng === undefined ? function () {\n    return true;\n  } : minLng === undefined ? function (lng) {\n    return lng <= maxLng;\n  } : maxLng === undefined ? function (lng) {\n    return lng >= minLng;\n  } : maxLng >= minLng ? function (lng) {\n    return lng >= minLng && lng <= maxLng;\n  } : function (lng) {\n    return lng >= minLng || lng <= maxLng;\n  }; // for ranges that cross the anti-meridian\n\n  var pnts = [];\n  for (var i = pntIdxRange[0]; i <= pntIdxRange[1]; i++) {\n    var lng = getPntLng(i);\n    isLngInRange(lng) && pnts.push([lng, getPntLat(i)]);\n  }\n  return pnts;\n}\nfunction pointInside(pnt, polygon) {\n  var crossesPoleOrAntimeridian = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  // turf method is more performing but malfunctions if polygon includes a pole (lat = 90 | -90) or crosses the antimeridian (lng = 180 | -180)\n  return crossesPoleOrAntimeridian ? (0,d3_geo__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(polygon, pnt) : (0,_turf_boolean_point_in_polygon__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(pnt, polygon);\n}\n\nvar THREE = window.THREE ? window.THREE // Prefer consumption from global THREE, if exists\n: {\n  BufferGeometry: three__WEBPACK_IMPORTED_MODULE_12__.BufferGeometry,\n  Float32BufferAttribute: three__WEBPACK_IMPORTED_MODULE_12__.Float32BufferAttribute\n};\n\n// support both modes for backwards threejs compatibility\nvar setAttributeFn = new THREE.BufferGeometry().setAttribute ? 'setAttribute' : 'addAttribute';\nvar ConicPolygonBufferGeometry = /*#__PURE__*/function (_THREE$BufferGeometry) {\n  function ConicPolygonBufferGeometry(polygonGeoJson, startHeight, endHeight, closedBottom, closedTop, includeSides, curvatureResolution) {\n    var _this;\n    _classCallCheck(this, ConicPolygonBufferGeometry);\n    _this = _callSuper(this, ConicPolygonBufferGeometry);\n    _this.type = 'ConicPolygonBufferGeometry';\n    _this.parameters = {\n      polygonGeoJson: polygonGeoJson,\n      startHeight: startHeight,\n      endHeight: endHeight,\n      closedBottom: closedBottom,\n      closedTop: closedTop,\n      includeSides: includeSides,\n      curvatureResolution: curvatureResolution\n    };\n\n    // defaults\n    startHeight = startHeight || 0;\n    endHeight = endHeight || 1;\n    closedBottom = closedBottom !== undefined ? closedBottom : true;\n    closedTop = closedTop !== undefined ? closedTop : true;\n    includeSides = includeSides !== undefined ? includeSides : true;\n    curvatureResolution = curvatureResolution || 5; // in angular degrees\n\n    // pre-calculate contour, triangulation and UV maps\n    var _geoPolygonTriangulat = geoPolygonTriangulate(polygonGeoJson, {\n        resolution: curvatureResolution\n      }),\n      contour = _geoPolygonTriangulat.contour,\n      triangles = _geoPolygonTriangulat.triangles;\n    var flatUvs = (0,d3_array__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(triangles.uvs);\n    var vertices = [];\n    var uvs = [];\n    var indices = [];\n    var groupCnt = 0; // add groups to apply different materials to torso / caps\n\n    var addGroup = function addGroup(groupData) {\n      var prevVertCnt = Math.round(vertices.length / 3);\n      var prevIndCnt = indices.length;\n      vertices = vertices.concat(groupData.vertices);\n      uvs = uvs.concat(groupData.uvs);\n      indices = indices.concat(!prevVertCnt ? groupData.indices : groupData.indices.map(function (ind) {\n        return ind + prevVertCnt;\n      }));\n      _this.addGroup(prevIndCnt, indices.length - prevIndCnt, groupCnt++);\n    };\n    includeSides && addGroup(generateTorso());\n    closedBottom && addGroup(generateCap(startHeight, false));\n    closedTop && addGroup(generateCap(endHeight, true));\n\n    // build geometry\n    _this.setIndex(indices);\n    _this[setAttributeFn]('position', new THREE.Float32BufferAttribute(vertices, 3));\n    _this[setAttributeFn]('uv', new THREE.Float32BufferAttribute(uvs, 2));\n\n    // auto-calculate normals\n    _this.computeVertexNormals();\n\n    //\n\n    function generateVertices(polygon, altitude) {\n      var coords3d = polygon.map(function (coords) {\n        return coords.map(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n            lng = _ref2[0],\n            lat = _ref2[1];\n          return polar2Cartesian(lat, lng, altitude);\n        });\n      });\n      // returns { vertices, holes, coordinates }. Each point generates 3 vertice items (x,y,z).\n      return (0,earcut__WEBPACK_IMPORTED_MODULE_0__.flatten)(coords3d);\n    }\n    function generateTorso() {\n      var _generateVertices = generateVertices(contour, startHeight),\n        bottomVerts = _generateVertices.vertices,\n        holes = _generateVertices.holes;\n      var _generateVertices2 = generateVertices(contour, endHeight),\n        topVerts = _generateVertices2.vertices;\n      var vertices = (0,d3_array__WEBPACK_IMPORTED_MODULE_1__[\"default\"])([topVerts, bottomVerts]);\n      var numPoints = Math.round(topVerts.length / 3);\n      var holesIdx = new Set(holes);\n      var lastHoleIdx = 0;\n      var indices = [];\n      for (var v0Idx = 0; v0Idx < numPoints; v0Idx++) {\n        var v1Idx = v0Idx + 1; // next point\n        if (v1Idx === numPoints) {\n          v1Idx = lastHoleIdx; // close final loop\n        } else if (holesIdx.has(v1Idx)) {\n          var holeIdx = v1Idx;\n          v1Idx = lastHoleIdx; // close hole loop\n          lastHoleIdx = holeIdx;\n        }\n\n        // Each pair of coords generates two triangles (faces)\n        indices.push(v0Idx, v0Idx + numPoints, v1Idx + numPoints);\n        indices.push(v1Idx + numPoints, v1Idx, v0Idx);\n      }\n      var uvs = []; // wrap texture around perimeter (u), with v=1 on top\n      for (var v = 1; v >= 0; v--) for (var i = 0; i < numPoints; i += 1) uvs.push(i / (numPoints - 1), v);\n      return {\n        indices: indices,\n        vertices: vertices,\n        uvs: uvs\n      };\n    }\n    function generateCap(radius) {\n      var isTop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      return {\n        // need to reverse-wind the bottom triangles to make them face outwards\n        indices: isTop ? triangles.indices : triangles.indices.slice().reverse(),\n        vertices: generateVertices([triangles.points], radius).vertices,\n        uvs: flatUvs\n      };\n    }\n    return _this;\n  }\n  _inherits(ConicPolygonBufferGeometry, _THREE$BufferGeometry);\n  return _createClass(ConicPolygonBufferGeometry);\n}(THREE.BufferGeometry); //\nfunction polar2Cartesian(lat, lng) {\n  var r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var phi = (90 - lat) * Math.PI / 180;\n  var theta = (90 - lng) * Math.PI / 180;\n  return [r * Math.sin(phi) * Math.cos(theta),\n  // x\n  r * Math.cos(phi),\n  // y\n  r * Math.sin(phi) * Math.sin(theta) // z\n  ];\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-conic-polygon-geometry/dist/three-conic-polygon-geometry.mjs\n");

/***/ })

};
;